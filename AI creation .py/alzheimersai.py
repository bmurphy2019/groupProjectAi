# -*- coding: utf-8 -*-
"""AlzheimersAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HHtXEurzYhgBi6RnlVjQwxSkP4i1M4xg
"""

# Brian Murphy R00189335
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.callbacks import ModelCheckpoint


# data importing
# I picked oasis cross sectional since its the bigger of the two data sets
data_cross = pd.read_csv("/content/oasis_cross-sectional.csv")

data_cross.columns = ['ID','Gender','Hand','Age','Educ','SES','MMSE','CDR','eTIV','nWBV','ASF','Delay']
# data cleaning
data_cross.dropna(subset=['CDR'],inplace=True)

data_cross.drop(columns=['ID','Delay'],inplace=True)

data = data_cross

# Dropping all the rows with nan values 
data.dropna(inplace=True) 

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
data['CDR'] = le.fit_transform(data['CDR'].values)
data = data.drop(data[data['CDR']==3].index)

data['Gender'] = data.Gender.map({'M': 0, 'F': 1})
data['CDR'] = data.CDR.map({0: 0, 1: 1, 2:1})
data['Hand'] = data.Hand.map({'R': 0, 'L': 1})
# add target column to Y and everything else to X
y = data.pop('CDR')
X = data

# 80-20 split train test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
model = Sequential()
model.add(Dense(30, activation = 'relu', input_dim=9))

model.add(Dense(20, activation='relu'))

model.add(Dense(15, activation='relu')) 

model.add(Dense(1, activation='sigmoid')) 

model.compile(optimizer= 'adam' ,loss='binary_crossentropy',metrics=['acc'])




checkpointer = ModelCheckpoint('Alzheimers.h5', monitor='val_acc', mode='max', verbose=2, save_best_only=True)
history=model.fit(X_train, y_train, batch_size=16, epochs=350, validation_data=(X_test, y_test), callbacks=[checkpointer])

# simple accuracy evauation and print
present_model = keras.models.load_model('Alzheimers.h5')
print("Accuracy of our model on test data : " , present_model.evaluate(X_test,y_test)[1]*100 , "%")

# export as tflite model
import tensorflow as tf

# Convert the model.
converter = tf.lite.TFLiteConverter.from_keras_model(keras.models.load_model('Alzheimers.h5'))
tflite_model = converter.convert()

# Save the model.
with open('Alzheimers.tflite', 'wb') as f:
  f.write(tflite_model)